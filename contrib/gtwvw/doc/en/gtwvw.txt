/* Copyright 2008 Manoel N. Angeiras N. (angeiras gmail@com) */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW__MakeDlgTemplate()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW__MakeDlgTemplate( Dlg ,; aItens1,; aItens2,; aItens3,; aItens4,; aItens5,;
      aItens6,; aItens7,; aItens8,; aItens9,; aItens10 )
   $ARGUMENTS$
      <aDlg> <aItens1> <aItens2> <aItens3> <aItens4> <aItens5> <aItens6> <aItens7>
      <aItens8> <aItens9> <aItens10>
   $DESCRIPTION$
      Creates a window dialog template.
   $RETURNS$
      String with new template dialog.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_AddRows()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_AddRows( nWinNum, nRows )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nRows> Number of lines to
      add or reduce ( if nRows < 0 ).
   $DESCRIPTION$
      Adds or reduces lines from window. The new lines will be colored from column
      zero color, from prior line. There's no checking to determine if the window is
      bigger than desktop area ( except if in maincoord mode, because we need these
      boundaries to maxrow() function ).
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_AppendMenu()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_AppendMenu( hMenu, nFlags, nMenuItemId, cCaption )
   $ARGUMENTS$
      <hMenu> Identifies the menu to be changed. <nFlags> Specifies flags to control
      the appearance and behavior of the new menu item. This parameter can be a
      combination of values ( all flags can be viewed in WinUser.ch file ).
      <nMenuItemId> Specifies either the identifier of the new menu item or, if the
      uFlags parameter is set to MF_POPUP, the handle to the drop-down menu or
      submenu. <cCaption> Specifies the string content of the new menu item or full
      path to a bitmap to the new menu item.
   $DESCRIPTION$
      Adds a new menu item. Through this function we can specifies the content,
      appearance and behavior of each menu item.
   $RETURNS$
      If successful, a value greater than zero. Otherwise zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBAddString()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBAddString( nHandleDialog, nIDComboBox, cItem )
   $ARGUMENTS$
      <nHandleDialog> Dialog handle of window. <nIdComboBox> ID of Combobox. <cItem>
      Item to be included in Combobox.
   $DESCRIPTION$
      Adds an item into Combobox.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBCreate()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBCreate( nWinNum ,; nTop ,; nLeft ,; nWidth ,; aText ,; bBlock ,;
      nListLines,; nReserved ,; nKbdType ,; aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop>, <nLeft>
      Coordinates of combobox. <nWidth> Width of combobox. <aText> Array with all
      combobox elements. Default is empty. <bBlock> Code block, executed for the
      following events : CBN_SELCHANGE: CBN_SETFOCUS : CBN_KILLFOCUS: User change
      selection ( not executed when made by program itself ) When focus go to
      combobox When focus lost from combobox
   $DESCRIPTION$
      Create a combobox in current window.
   $RETURNS$
      Handle of combobox, if successful. Zero if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBDestroy()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBDestroy( nWinNum, nCBId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCBId> ID of Combobox.
   $DESCRIPTION$
      Delete a combobox in the current window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBEnable()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBEnable( nWinNum, nCBId, lEnable )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCBId> ID of Combobox.
      <lEnable> Enable (.T.) or disable (.F.) combobox button in current window.
      Default is .T.
   $DESCRIPTION$
      Enable/Disable access of combobox in current window.
   $RETURNS$
      Return old configuration of combobox ( .T. enable, .F. disable ). If failed,
      return .F..
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBFindString()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBFindString( nWinNum, nCBId, cString )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCBId> ID of combobox.
      <cString> String to find.
   $DESCRIPTION$
      Find index of string in combobox in current window. This function is case
      insensitive.
   $RETURNS$
      Index of string, or ­1 if failed ( or can't find ).
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBGetCurText()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBGetCurText( nWinNum, nCBId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCBId> ID of combobox.
   $DESCRIPTION$
      Get current selected string in combobox in current window.
   $RETURNS$
      String, if successful, or "" if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBGetIndex()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBGetIndex( nWinNum, nCBId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCBId> ID of combobox.
   $DESCRIPTION$
      Get current selection in combobox ( start from zero ).
   $RETURNS$
      Current position in combobox or ­1 if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBIsDropped()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBIsDropped( nWinNum, nCBId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCBId> ID of combobox.
   $DESCRIPTION$
      Get current dropped state of combobox in current window.
   $RETURNS$
      Return .T. if listbox is being shown, otherwise .F.. Also return .F. if
      combobox ID is not valid.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBISFocused()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBISFocused( nWinNum, nCBId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCBId> ID of combobox.
   $DESCRIPTION$
      Get information if focus is on combobox in current window.
   $RETURNS$
      .T. if is focused, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBSetCodeBlock()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBSetCodeBlock( nWinNum, nCBId, bBlock )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCBId> ID of combobox.
      <bBlock> New code block to assign to combobox.
   $DESCRIPTION$
      Assign a new code block to combobox on current window.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBSetCurSel()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBSetCurSel( nHandleDialog, nIDCombobox, nIndex )
   $ARGUMENTS$
      <nHandleDialog> Handle of window dialog. <nIDCombobox> ID of combobox.
      <nIndex> Index of item ( start from zero ). If ­1, remove current selection
      and clean edit control of combobox.
   $DESCRIPTION$
      Select na item of combobox list.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBSetFont()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBSetFont( nWinNum ,; cFontFace ,; nHeight ,; nWidth ,; nWeight ,;
      nQuality ,; lItalic ,; lUnderline,; lStrikeout )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <cFontName> Name of the
      font. <nHeight> Height of the font's character. <nWidth> Specifies average
      width of character in the font. <nWeight> Specifies the weight of the font in
      the range 0 through 1000 ( see About Fonts section ). <nQuality> Specifies the
      output quality. <lItalic> Specifies an italic font if set to TRUE.
      <lUnderline> Specifies an underlined font if set to TRUE. <lStrikeout>
      Specifies a strikeout font if set to TRUE.
   $DESCRIPTION$
      This will initialize font for all comboboxes on current window (including ones
      created later on).
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CBSetIndex()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CBSetIndex( nWinNum, nCBId, nIndex )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCBId> ID of combobox.
      <nIndex> Item index on combobox ( start from 0 ).
   $DESCRIPTION$
      Set current selection on combobox.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CenterWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CenterWindow( nWinNum, lCenter, lPaint )
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_ChooseColor()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_ChooseColor( nRGBInit, aRGB16, nFlags )
   $ARGUMENTS$
      <nRGBInit> Initial color. <aRGB16> Array of 16 elements, with color index.
      Default is an array with color set of button. <nFlags> A set of bit flags that
      you can use to initialize the color common dialog box. When the dialog box
      returns, it sets these flags to indicate the user's input. Default is a
      combination of CC_ANYCOLOR | CC_RGBINIT | CC_FULLOPEN.
   $DESCRIPTION$
      Open a color selection dialog.
   $RETURNS$
      Contains the RGB color value of the color selected by the user, if the user
      clicks OK button of the dialog box.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_ChooseFont()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_ChooseFont(
      cFontName,nHeight,nWidth,nWeight,nQuality,lItalic,lUnderline,lStrikeout )
   $ARGUMENTS$
      <cFontName> Name of the font. <nHeight> Height of the font's character.
      <nWidth> Specifies average width of character in the font. <nWeight> Specifies
      the weight of the font in the range 0 through 1000 ( see About Fonts section
      ). <nQuality> Specifies the output quality. <lItalic> Specifies an italic font
      if set to TRUE. <lUnderline> Specifies an underlined font if set to TRUE.
      <lStrikeout> Specifies a strikeout font if set to TRUE.
   $DESCRIPTION$
      Creates a common font dialog box that enables the user to choose attributes
      for alogical font.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_ClientToScreen()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_ClientToScreen( nWinNum, nRow, nCol )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nRow>, <nCol> Row/Column
      in current windows to be converted.
   $DESCRIPTION$
      Converts row/column in current screen to coordinates x,y relative to screen.
   $RETURNS$
      Array with two positions with coordinates x,y.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CreateDialogDynamic()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CreateDialogDynamic(cDlgTemplate|nResource, lHandle,
      cDlgProc|bDlgProc|nDlgProc, nFlag)
   $ARGUMENTS$
      <cDlgTemplate|nResource> <lHandle> <cDlgProc|bDlgProc|nDlgProc> <nFlag>
   $DESCRIPTION$
      Creates a dialog window dynamically.
   $RETURNS$
      Handle of dialog window or zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CreateDialogModal()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CreateDialogModal(cDialog|nResource|cDlgTemplate, NIL,
      bDlgProc|cDlgProc,nFlag,nHandle)
   $ARGUMENTS$
      <cDialog|nResource|cDlgTemplate> <bDlgProc|cDlgProc> <nFlag> <nHandle>
   $DESCRIPTION$
      Creates a modal dialog window.
   $RETURNS$
      Handle of dialog window or zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CreateFont()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CreateFont(cFontFace ,; nHeight ,; nWidth ,; nWeight ,; lItalic ,;
      lUnderline,; lStrikeout,; nCharset ,; nQuality ,; nEscapement )
   $ARGUMENTS$
      <cFontFace> Name of the font. <nHeight> Height of the font's character.
      <nWidth> Specifies average width of character in the font. <nWeight> Specifies
      the weight of the font in the range 0 through 1000 ( see About Fonts section
      ). <lItalic> Specifies an italic font if set to TRUE. <lUnderline> Specifies
      an underlined font if set to TRUE. <lStrikeOut> Specifies a strikeout font if
      set to TRUE. <nCharSet> Identify the character set. <nQuality> Specifies the
      output quality <nEscapement> Specifies the angle, in tenths of degrees,
      between the escapement vector and the x-axis of the device.
   $DESCRIPTION$
      creates a logical font that has the characteristics specified in the
      parameters. The font can subsequently be selected as the current font for any
      device context.
   $RETURNS$
      If successful, the return value is a handle to a logical font. If failed,
      return zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CreateMenu()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CreateMenu()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Creates a menu. Initially, the menu is empty, but can be filled with items
      through function WVW_AppendMenu().
   $RETURNS$
      Handle of new created menu. If failed, returns NULL.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CreatePopupMenu()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CreatePopupMenu()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Creates a drop-down menu, submenu or shortcut menu. The menu is initialy
      empty, but you can insert or append menu items by using the WVW_AppendMenu()
      function.
   $RETURNS$
      Handle of new popup menu. If failed, return NULL.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CXCreate()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CXCreate( nWinNum ,; nTop ,; nLeft ,; nBottom ,; nRight ,; cText ,;
      cImage/nImage ,; bBlock ,; aOffset ,; nStretchBitmap,; lMap3DColors )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft> Row/column
      of top/left corner. <nBottom, nRight> Row/column of bottom/right corner.
      <cText> Text of checkbox. Default is empty. <cImage/nImage> If numeric,
      represent an resource ID from a .RC file. If string, represent a bitmap file
      name ( must be supplied with a full path ). <bBlock> Code block to exectue on
      every BN_CLICK event. This code block will be evaluated with these parameters
      : current window and checkbox id. If this parameter is omitted, the checkbox
      will not be created. <aOffSet> Array of four elements {x1,y1,x2,y2} with
      offsets to corner pixels to adjust dimension of checkbox. Default is
      {-2,-2,+2,+2}. <nStretchBitmap> A number between 0 and 1 (inclusive) as a
      factor to stretch the bitmap. Example : 1.0 0.5 0 Bitmap covers the whole
      button Bitmap covers 50% of button Bitmap is not stretch
   $DESCRIPTION$
      Creates a checkbox.
   $RETURNS$
      Returns checkbox handle, if successful. If failed, return zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CXDestroy()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CXDestroy( nWinNum, nCXId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCXId> ID of checkbox.
   $DESCRIPTION$
      Delete a checkbox on current window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CXEnable()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CXEnable( nWinNum, nCXId, lToggle )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCXId> ID of checkbox.
      <lToggle> If .T., Enable, otherwisie disable. Default is .T.
   $DESCRIPTION$
      Enable/disable a checkbox on current window.
   $RETURNS$
      Return previous state of the checkbox, if <lToggle> informed. Otherwise,
      returns current state of the checkbox ( .T. = enable, .F. = disable ).
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CXGetCheck()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CXGetCheck( nWinNum, nCXId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCXId> ID of checkbox.
   $DESCRIPTION$
      Return current state of checkbox.
   $RETURNS$
      Returns one of the following values : 0 1 2 Not selected Selected
      Indeterminate
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CXSetCheck()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CXSetCheck( nWinNum, nCXId, nCheckState )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCXId> ID of checkbox.
      <nCheckState> 0 1 2 Not selected Selected Indeterminate
   $DESCRIPTION$
      Assign check-state of checkbox.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CXSetCodeBlock()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CXSetCodeBlock( nWinNum, nCXId, bBlock )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCXId> ID of checkbox.
      <bBlock> Code block
   $DESCRIPTION$
      Assign a new code block to checkbox on current window.
   $RETURNS$
      .T. if successful, .F. if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_CXSetFocus()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_CXSetFocus( nWinNum, nCXId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCXId> ID of checkbox.
   $DESCRIPTION$
      Set the focus to checkbox.
   $RETURNS$
      .T. if successful, .F. if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DeleteMenu()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DeleteMenu( hMenu, nPosition, nFlag )
   $ARGUMENTS$
      <hMenu> Identifies the menu to be changed. <nPosition> Specifies a menu item
      to be changed. <nFlag> Specifies how <nPosition> will be interpreted. This
      parameter can be one of two values : MF_BYCOMMAND MF_BYPOSITION Indicates that
      <nPosition> gives the identifier of the menu item. The MF_BYCOMMAND flag is
      the default flag if neither the MF_BYCOMMAND nor MF_BYPOSITION flag is
      specified. Indicates that <nPosition> gives the zero-based relative position
      of the menu item.
   $DESCRIPTION$
      This function deletes an item from the specified menu. If the menu item opens
      a menu or submenu, this function destroys the handle to the menu or submenu
      and frees the memory used by the menu or submenu.
   $RETURNS$
      If the function succeeds, the return value is nonzero. If the function fails,
      the return value is zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DestroyMenu()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DestroyMenu( hMenu )
   $ARGUMENTS$
      <hMenu> Identifies the menu to be destroyed.
   $DESCRIPTION$
      This function deletes an item from the specified menu. If the menu item opens
      a menu or submenu, this function destroys the handle to the menu or submenu
      and frees the memory used by the menu or submenu.
   $RETURNS$
      If the function succeeds, the return value is nonzero. If the function fails,
      the return value is zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DlgSetIcon()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DlgSetIcon( nHandleDialog, ncIcon )
   $ARGUMENTS$
      <nHandleDialog> Handle of dialog window. <ncIcon> If numeric, identifies a
      RESOURCE in a RC file. If string, identifies an icon file name.
   $DESCRIPTION$
      Defines an icon on a dialog window.
   $RETURNS$
      If successful, icon handle. Otherwise, NIL.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawBoxGet()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawBoxGet( nWinNum, nRow, nCol, nWidth, aOffset )
   $DESCRIPTION$
      Draws a box to an input get. Unlike GTWVT, GTWVW draw white lines on outer
      right and outer bottom. Besides, scope is the same as DRAWBOXRECESSED, ie.,
      two pixel out of char boundary.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawBoxGroup()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawBoxGroup( nWinNum, nTop, nLeft, nBottom, nRight, aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom
      ,nRight> Coordinates to draw a box. <aOffset> Array of four elements with
      top/left and bottom/right corner coordinates to align the box with row/column.
   $DESCRIPTION$
      Draws a box.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawBoxRaised()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawBoxRaised( nNumWin, nTop, nLeft, nBottom, nRight, lTight/aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a box. <lTight/aOffset> If <lTight>, box is draw
      inside the character region and top and left lines are lower two pixel down to
      make room for above/left object. If <aOffset>, an array of four elements is
      defined with coordinates top, left, bottom right to align box with row/column.
   $DESCRIPTION$
      Draws a raised box.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawBoxRecessed()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawBoxRecessed( nWinNum, nTop, nLeft, nBottom, nRight, lTight/aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a box. <lTight/aOffset> If <lTight>, box is drawn
      inside the character region and top and left lines are lower two pixel down to
      make room for above/left object. If <aOffset>, an array of four elements is
      defined with coordinates top, left, bottom right to align box with row/column.
   $DESCRIPTION$
      Draws a recessed box.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawButton()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawButton( nWinNum ,; nTop ,; nLEft ,; nBottom ,; nRight ,; cText ,;
      cImage/nImage,; nFormat ,; nTextColor ,; nBkClor ,; nImageAt )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nButtom,
      nRight> Coordinates to draws a button. <cText> Text of button. <cImage/nImage>
      If string, specifies a bitmap filename ( full path is required ). If numeric,
      specifies the position of image in application image cache. <nFormat>
      Specifies shape of button : 0 1 2 Raised ( default ) Recessed Outline
   $DESCRIPTION$
      Draws a button.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawColorRect()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawColorRect( nWinNum, nTop, nLeft, nBottom, nRight, aOffPixels,
      nRGBColor )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a rectangle. <aOffPixels> Array of four elements
      with top/left and bottom/right coordinates to align the rectangle with
      row/column. <nRGBColor> Color to fill the rectangle.
   $DESCRIPTION$
      Draws a color rectangle. WVW_FillRectangle(). This function is for
      compatibility with GWTWVT, similar to
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawEllipse()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawEllipse( nWinNum, nTop, nLeft, nBottom, nRight, aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw an ellipse. <aOffset> Array of four elements with
      top/left and bottom/right coordinates to align the ellipse with row/column.
   $DESCRIPTION$
      Draws an ellipse.
   $RETURNS$
      Returns a nonzero value, if successful, otherwise zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawFocusRect()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawFocusRect( nWinNum, nTop, nLeft, nBottom, nRight, aOffSet )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a rectangle. <aOffset> Array of four elements with
      top/left and bottom/right coordinates to align the rectangle with row/column.
   $DESCRIPTION$
      Draws a rectangle in a style to represent focus.
   $RETURNS$
      Returns a nonzero value, if successful, otherwise zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawGridHorz()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawGridHorz( nWinNum, nTop, nLeft, nBottom, nRight, nRows )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw horizontal grid. <nRows> Number of lines to
      horizontal grid.
   $DESCRIPTION$
      Draws a horizontal grid.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawGridVert()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawGridVert( nWinNum, nTop, nBottom, aCols, nCols, aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nBottom>
      Initial/final line to draw vertical grid. <aCols> Array with sizes of columns
      to be draw. <nCols> Number of columns to be draw. <aOffset> Array of four
      row/column. elements with top/left, bottom/right offset to align vertical grid
      to
   $DESCRIPTION$
      Draws a vertical grid.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawImage()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawImage( nWinNum ,; nTop ,; nLeft ,; nBottom ,; nRight ,;
      cImage/nPictureSlot,; lTight/aOffset ,; lTransparent )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
      <nTop,nLeft,nBottom,nRight> Coordinates to draw an image. If <nBottom> is NIL,
      so image´s height will be proportional to image´s width. If <nRight> is NIL,
      so image´s width will be proportional to image´s height. If both <nbottom> and
      <nRight> are NIL, so original size of image will be used.
      <cImage/nPictureSlot> If string, an image will be read from <cImage> ( full
      path ). If numeric, will an index in an image list ( previously loaded by
      application ). WARNING : this function will always cache the image. Do not use
      it to draw large number of images, because image handle is never closed.
      <lTight/aOffset> Specifies how image will be adjusted ( in pixels ) to
      row/column coordinates. <lTransparent> If .T., specifies a transparent image,
      otherwise .F. If .T., transparency color will be the top left corner pixel.
   $DESCRIPTION$
      Draws an image.
   $RETURNS$
      .T. if successful ( draws an image ), .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawLabel()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawLabel( nWinNum ,; nRow ,; nCol ,; cLabel ,; nAlign ,; nEscapement,;
      nTextColor ,; nBkColor ,; cFontFace ,; nHeight ,; nWidth ,; nWeight ,;
      nQuality ,; nCharSet ,; lItalic ,; lUnderline ,; lStrikeOut )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nRow,nCol> Row/column to
      draw a label. <cLabel> String to be draw. <nAlign> String alignment. Default
      is TA_LEFT ( another definitions : see file WINGDI.CH ). <nEscapement>
      Specifies angle. <nTextColor> Color index of label. <nBkColor> Color index of
      background of label. <cFontFace> Name of the font. <nHeight> Height of the
      font's character. <nWidth> Specifies average width of character in the font.
      <nWeight> Specifies the weight of the font in the range 0 through 1000 ( see
      About Fonts section ). <nQuality> Specifies the output quality.
   $DESCRIPTION$
      Draws a label.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawLabelEx()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawLabelEx( nWinNum, nRow, nCol, cLabel, nAlign, cTextColor, nBkColor,
      nSlotFont )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nRow,nCol> Row/column to
      draw a label. <cLabel> String to be draw. <nAlign> Text alignment. Default is
      TA_LEFT ( see WINGDI.CH to another definitions ). <cTextColor> Index color of
      the font. <nBkColor> Index color of label background. <nSlotFont> Index of
      application cache fonts. If image cache is empty ( or index does not exist ),
      function will be not executed.
   $DESCRIPTION$
      Draws a label.
   $RETURNS$
      .T. if successful ( draws a label ), .F. otherwise ( returns .F. if
      <nSlotFont> invalid ).
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawLabelObj()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawLabelObj( nWinNum ,; nTop ,; nLeft ,; nBottom ,; nRight ,; cLabel ,;
      nAlignHorz,; nAlignVert,; nTextColor,; nBkColor ,; hFont ,; aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a label. <cLabel> String to be draw. <nAlignHorz>
      Horizontal align of the label. Default is zero. <nAlignVert> Vertical align.
      Default is zero. <nTextColor> Index color of the label. <nBkColor> Index
      backgroud color of the label. <hFont> Specifies which font will be used to
      draw a label. <aOffSet> String of four elements to align label with
      coordinates <nTop, nLeft, nBottom, nRight>.
   $DESCRIPTION$
      Draws a label.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawLine()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawLine( nWinNum,; nTop ,; nLeft ,; nBottom,; nRight ,; nOrient,;
      nFormat,; nAlign ,; nStyle ,; nThick ,; nColor ,; aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a line. <nOrient> Line orientation : 0 1
      Horizontal Vertical
   $DESCRIPTION$
      Draws a line.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawLineEx()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawLineEx( nWinNum, nTop, nLeft, nBottom, nRight, nOrient, nFormat,
      nAlign, nSlotPen )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a line. <nOrient> Line orientation : 0 1
      Horizontal Vertical
   $DESCRIPTION$
      Draws a line ( using an index of pen´s cache ).
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawMenuBar()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawMenuBar()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      This function repaint the menu bar of the current window. If the menu bar
      changes after Windows has created the window, this function must be called to
      repaint the changed menu bar.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawOutline()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawOutline( nWinNum, nTop, nLeft, nBottom, nRight, nThick, nShape,
      nRGBColor )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a box. <nThick> Style of pen. See WINGDI.CH file
      for definitions ( PS_SOLID, PS_DOT, etc. ). <nShape> Ignored. <nRGBColor>
      Specifies color reference for pen ( a 32 bit RGB color value ).
   $DESCRIPTION$
      Draws a outline arguments. box in <nTop,nLeft,nBottom,nRight> coordinates,
      with style and color
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawOutlineEx()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawOutlineEx( nWinNum, nTop, nLeft, nBottom, nRight, nSlotPen )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a box. <nSlotPen> Index on pen´s cache.
   $DESCRIPTION$
      Draws an outlined box ( using an index of pen´s cache ).
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawPicture()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawPicture( nWinNum, nTop, nLeft, nBottom, nRight, nSlot, lTight/aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw an image. <nSlot> index on image´s cache.
      <lTight/aOffset> Array with four row/column. elements with top/left,
      bottom/right coordinates to align image with
   $DESCRIPTION$
      Draws an image, saving in a cache if images.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawProgressBar()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawProgressBar( nWinNum ,; nTop ,; nLeft ,; nBottom ,; nRight ,;
      aOffPixels,; nPercent ,; nBackColor,; nBarColor ,; cImage ,; lVertical ,;
      nDirection )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
      <nTop,nLeft,nBottom,nRight> Coordinates to draw a progress bar. <aOffPixels>
      Array with four elemets with top/left, bottom/right coordinates to align
      progress bar with row/column. <nPercent> Maximum range value. <nBackColor>
      Background color. <nBarColor> Progress bar color. <cImage> An image to show
      when progress bar is running. <lVertical> Specifies if progress bar is
      vertical ( .T. ) or horizontal ( .F. ). <nDirection> 0 Specifies a left to
      right progress bar ( default ) 1 Specifies a right to left progress bar
   $DESCRIPTION$
      Draws a progress bar.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawRectangle()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawRectangle( nWinNum, nTop, nLeft, nBottom, nRight, aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a rectangle. <aOffset> Array with four elements
      with top/left, bottom/right coordinates to align rectangle with row/column.
   $DESCRIPTION$
      Draws a rectangle.
   $RETURNS$
      If successful returns a non-zero value, otherwise zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawRoundRect()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawRoundRect(nWinNum, nTop, nLeft, nBottom, nRight, aOffset,
      nRoundHeight, nRoundWidth)
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a rectangle. <aOffset> Array with four elements
      with top/left, bottom/right coordinates to align rectangle with row/column.
      <nRoundHeight> Width of ellipse to round rectangle´s corner. <nRoundWidth>
      Height of ellipse to round rectangle´s corner.
   $DESCRIPTION$
      Draws a rectangle with rounded corners.
   $RETURNS$
      If successful returns a non-zero value, otherwise zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawScrollButton()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawScrollButton( nWinNum, nTop, nLeft, nBotton, nRight, aOffPixels,
      nTLBR, lDepressed )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a scrollbutton. <aOffPixels> Array with four
      elements with top/left, bottom/right coordinates to align scrollbutton with
      row/column. <nTLBR> Specifies scrollbutton direction : 1 2 3 4 Up arrow button
      Left arrow button Bottom arrow button Right arrow button
   $DESCRIPTION$
      Draws a scrollbutton. With functions WVW_XB***(), this function becomes
      obsolete.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawScrollThumbHorz()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawScrollThumbHorz( nWinNum, nTop, nLeft, nBottom, nRight, aOffPixels,
      nThumbPos )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw scrollbar movement button. <aOffPixels> Array of
      four elements with top/left, bottom/right coordinates to align scrollbar
      movement button with row/column. <nThumbPos> Initial column position.
   $DESCRIPTION$
      Draws a horizontal obsolete. scrollbar button. With functions WVW_XB***(),
      this function becomes
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawScrollThumbVert()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawScrollThumbVert( nWinNum, nTop, nLeft, nBottom, nRight, aOffPixels,
      nThumbPos )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw scrollbar movement button. <aOffPixels> Array of
      four elements with top/left, bottom/right coordinates to align scrollbar
      movement button with row/column. <nThumbPos> Initital line position.
   $DESCRIPTION$
      Draws a vertical obsolete. scrollbar button. With functions WVW_XB***(), this
      function becomes
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawShadedRect()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawShadedRect(
      nWinNum,nTop,nLeft,nBottom,nRight,aOffPixels,nHorVert,aRGBb,aRGBe )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw a rectangle. <aOffPixels> Array of four elements
      with top/left, bottom/right coordinates to align rectangle with row/column.
      <nHorVert> Specifies draws method and how to interpret rectangle fill array (
      <aRGBb> and <aRGBe> ). Default is GRADIENT_FILL_RECT_H ( see WINGDI.CH file
      for all definitions ). <aRGBb> Array of four color position ( Red, Gree, Blue,
      Alpha ), with initial rectangle position. <aRGBe> Array of four color position
      ( Red, Gree, Blue, Alpha ), with final rectangle position.
   $DESCRIPTION$
      Draws a rectangle in specified coordinates, with gradient filling colors,
      varying from <aRGBb> to <aRGBe>.
   $RETURNS$
      .T. if successful, otherwise .F.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawStatusBar()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawStatusBar( nWinNum, nPanels, aPos )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPanels> Number of parts
      in a status bar. <aPos> Array with row/column positions to divide status bar.
   $DESCRIPTION$
      Draws a status bar. Only for compatibility with GTWVT. WVW_SB***() functions
      are recommended instead.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawTextBox()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawTextBox( nWinNum ,; nTop ,; nLeft ,; nBottom ,; nRight ,; aOffPixels,;
      cText ,; nAlignHorz,; nAlignVert,; nTextColor,; nBackColor,; nBackMode ,;
      hFont )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw text. <aOffPixels> Array of four row/column.
      <cText> Text to be draw. <nAlignHorz> Specifies text alignment inside
      coordinates : 0 1 2 Left ( default ) Right Centralized elements with top/left,
      bottom/right coordinates to align text with
   $DESCRIPTION$
      Draws a text in a rectangle.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_DrawToolButtonState()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_DrawToolButtonState( nWinNum, nTop, nLeft, nBottom, nRight, aOffPixels,
      nState )
   $ARGUMENTS$
      <nWinNum> Windwow number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw toolbutton. <aOffPixels> Array of four elements
      with top/left, bottom/right coordinates to align toolbutton with row/column.
      <nState> Button state : 0 1 2 Flat Raised Recessed
   $DESCRIPTION$
      Draws a toolbutton.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_EnableMaximize()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_EnableMaximize( nWinNum, lEnable )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <lEnable> If .T., enable
      maximize button, .F. disable.
   $DESCRIPTION$
      Read/Set maximize button. In order to enable MAXIMIZE button, app should have
      WVW_SIZE() callback function.
   $RETURNS$
      Old maximize box state, before applying the new style.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_EnableMenuItem()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_EnableMenuItem( hMenu, nPosition, nFlag )
   $ARGUMENTS$
      <hMenu> ID of menu. <nPosition> Specifies position of item to be
      enabled/disabled ( see <nFlag> argument ). <nFlag> For Harbour, in practice,
      we should define only two values : MF_DISABLE MF_ENABLE Specifies item to be
      disabled. Specifies item to be enabled.
   $DESCRIPTION$
      Enable/Disable menu item.
   $RETURNS$
      Returns old configuration of menu item. If menu item is invalid, returns zero.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_EnableShortCuts()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_EnableShortCuts( nWinNum, lEnable )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <lEnable> If .T., enable
      shortcut keys. .F. disable shortcut keys.
   $DESCRIPTION$
      Specifies if shortcut keys are enabled/disabled to acess menu item or system
      menu.
   $RETURNS$
      Returns old configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_FillRectangle()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_FillRectangle( nWinNum ,; nTop ,; nLeft ,; nBottom ,; nRight ,;
      nRGBColor/hBrush,; lTight ,; lUseBrush )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to fill a rectangle. <nRGBColor/hBrush> Rectangle filling
      color ( a 32 bits value with RGB color ). <lTight> Filling patern will be
      adjusted in all coordinates area. <lUseBrush> If .T., <nRGBColor/hBrush>
      argument is interpreted as a handle to a pen model. Otherwise, is used as a
      RGB color.
   $DESCRIPTION$
      Fills a rectangle using a color or a pen model.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetClipboard()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetClipboard()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Retrieves data from the clipboard.
   $RETURNS$
      Data from the clipboard.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetCursorPos()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetCursorPos()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Retrieves mouse coordinates.
   $RETURNS$
      Array of two elements, respectively, X coordinate and Y coordinate.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetFontInfo()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetFontInfo()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Retrieves current font data.
   $RETURNS$
      Array of seven elements : 1 2 3 4 5 6 7 ­ ­ ­ ­ ­ ­ ­ cFontFace cFontHeight
      nFontWidth nFontWeight cFontQuality PTEXTSIZE->x PTEXESIZE->y Name Height
      Width Weight Quality Font's width in pixels Font's size in pixels
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetLastMenuEvent()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetLastMenuEvent()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Reads the last item selected ( always on current window ).
   $RETURNS$
      Last selected item or zero, if no item is selected previously.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetMenu()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetMenu()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Gets the handle of current window.
   $RETURNS$
      Menu handle.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetPaintRect()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetPaintRect( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Gets coordinates of screen with pending paint.
   $RETURNS$
      Returns array of paint pending rect {top, left, bottom, right}. Warning :
      unlike WVT, top maybe > bottom or left maybe > right. in these cases, no paint
      request is pending (in WVT these is reflected in {0,0,0,0}).
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetPalette()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetPalette()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Get color palette.
   $RETURNS$
      Array of 16 elements, each element represent a color.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetRGBColor()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetRGBColor( nColor )
   $ARGUMENTS$
      <nColor> Color index ( as defined in CA-Clipper ).
   $DESCRIPTION$
      Reads an index RGB color value for <nColor> argument.
   $RETURNS$
      Returns a RGB color value.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetRowColFromXY()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetRowColFromXY( nWinNum, nX, nY )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nX> X coordinate in
      pixels. <nY> Y coordinate in pixels.
   $DESCRIPTION$
      Convert X,Y coordinates ( in pixels ) to row and column.
   $RETURNS$
      Array of two elements : row and column.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetScreenHeight()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetScreenHeight()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Reads screen height, in pixels.
   $RETURNS$
      Screen height, in pixels.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetScreenWidth()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetScreenWidth()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Reads screen width, in pixels.
   $RETURNS$
      Screen width, in pixels.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetTitle()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetTitle()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Reads current window title.
   $RETURNS$
      Window current title.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetTooltipBkColor()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetTooltipBkColor()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Gets background color of tooltip.
   $RETURNS$
      Index RGB background color of tooltip.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetTooltipTextColor()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetTooltipTextColor()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Gets text color of tooltip.
   $RETURNS$
      Index RGB text color of tooltip.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetTooltipWidth()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetTooltipWidth()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Gets width of tooltip.
   $RETURNS$
      Tooltip width.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetWindowHandle()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetWindowHandle()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Gets handle of current window.
   $RETURNS$
      Window handle.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_GetXYFromRowCol()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_GetXYFromRowCol( nWinNum, nRow, nCol )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nRow> Line number. <nCol>
      Column number.
   $DESCRIPTION$
      Convert row and column to X,Y coordinates ( in pixels ).
   $RETURNS$
      Array of two elements : X coordinate and Y coordinate.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_InvalidateRect()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_InvalidateRect()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Invalidate current window, forcing a new painting.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_IsLButtonPressed()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_IsLButtonPressed()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Verify if left mouse button is pressed.
   $RETURNS$
      .T. button pressed. .F. button released.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_KillTimer()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_KillTimer( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Cancels timer event on current window.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_LBAddString()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_LBAddString( nHandleDialog, nIDListBox, cItem )
   $ARGUMENTS$
      <nHandleDialog> Handle of dialog window. <nIDListBox> ID of listbox. <cItem>
      Item to add in listbox.
   $DESCRIPTION$
      Adds an item in listbox.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_LBSetCurSel()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_LBSetCurSel( nHandleDialog, nIDListBox, nItem )
   $ARGUMENTS$
      <nHandleDialog> Handle of dialog window. <nIDListBox> ID of listbox. <nItem>
      Item index ( start from zero ).
   $DESCRIPTION$
      Selects an item in listbox.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_lCloseWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_lCloseWindow()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Closes the last/topmost window
   $RETURNS$
      .T. if successful.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_LoadFont()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_LoadFont( nSlotFont ,; cFontName ,; nHeight ,; nWidth ,; nWeight ,;
      lItalic ,; lUnderline,; lStrikeout,; nCharSet ,; nQuality ,; nEscapement )
   $ARGUMENTS$
      <nSlotFont> Index of font cache. <cFontName> Name of the font. <nHeight>
      Height of the font's character. <nWidth> Specifies average width of character
      in the font. <nWeight> Specifies the weight of the font in the range 0 through
      1000 ( see About Fonts section ). <lItalic> Specifies an italic font if set to
      TRUE. <lUnderline> Specifies an underlined font if set to TRUE. <lStrikeout>
      Specifies a strikeout font if set to TRUE. <nCharSet> Identify the character
      set. For example, ANSI_CHARSET, DEFAULT_CHARSET, OEM_CHARSET, etc. ( all
      models can be viewed in file WINGDI.CH ). <nQuality> Specifies the output
      quality. <nEscapement> Angle of escapement of the font.
   $DESCRIPTION$
      Load all information about the specified font, writing it in font cache.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_LoadPen()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_LoadPen( nSlot, nStyle, nWidth, nRGBColor )
   $ARGUMENTS$
      <nSlot> Index of cache of pen, defined by the user. <nStyle> Style of the pen.
      <nWidth> Specifies the width of the pen, in logical units. If nWidth is zero,
      the pen is a single pixel wide, regardless of the current transformation.
      <nRGBColor> Specifies a color reference for the pen color.
   $DESCRIPTION$
      Load definition of the pen ( style, width and color ) to a cache of pen.
   $RETURNS$
      Returns .T. if read and write of definition is OK, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_LoadPicture()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_LoadPicture( nSlot, cFilePicture )
   $ARGUMENTS$
      <nSlot> Position of the cache where the image will be loaded. If there is any
      image in this position, will be replaced. <cFilePicture> Image to be loaded in
      the cache.
   $DESCRIPTION$
      Load an image in cache of images. Please, read an observation about cache of
      images, in the introducion.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_Maximize()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_Maximize( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Maximize current window ( argument <nWinNum> is ignored ). If application
      define a callback function WVW_Size() the window will be maximized, otherwise,
      only restores window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_MaxMaxCol()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_MaxMaxCol( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Returns maximum <nWinNum>. possible MAXCOL() in current screen setting for
      font used by window
   $RETURNS$
      Maximum number of columns.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_MaxMaxRow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_MaxMaxRow( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Returns maximum <nWinNum>. possible MAXROW() in current screen setting for
      font used by window
   $RETURNS$
      Maximum number of rows.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_MessageBox()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_MessageBox( nWinNum, cMessage, cTitle, nOption )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <cMessage> Message to be
      displayed. <cTitle> Dialog box title. <nOption> Specifies a set of buttons
      that determine the contents and behavior of the dialog box. Default is MB_OK (
      OK button, without icons ). You can see all definitions in file WINUSER.CH.
   $DESCRIPTION$
      Creates, displays, and operates a message box. The message box contains an
      applicationdefined message and title, plus any combination of predefined icons
      and push buttons.
   $RETURNS$
      Number of selected option ( IDOK to OK button, IDCANCEL to Cancel button, etc.
      ). You can see all definitions in file WINUSER.CH
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_Minimize()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_Minimize()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Minimizes current window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_nColOfs()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_nColOfs( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Returns column offset of window <nWinNum> (0 == MAIN), relative to Main
      Window.
   $RETURNS$
      Number of offset columns.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_nNumWindows()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_nNumWindows()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Returns number of windows opened ( including main window ).
   $RETURNS$
      Number of opened windows.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_NoClose()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_NoClose( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Disable close button in windows <nWinNum>.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_nOpenWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_nOpenWindow( cWinName, row1, col1, row2, col2, nStyle, nParentWin,
      nExStyle )
   $ARGUMENTS$
      <cWinName > Title of window. If omitted, the name of executable will be used.
      <row1, col1, row2, col2 > Specifies initial row/column and final row/column of
      the window coordinates are relative to main window, not to current window.
      This coordinates are used to : 1) Put window in initial position. 2) Determine
      size of the window ( new maxrow() and maxcol() ). 3) Save in RowOfs and ColOfs
      to MainCoord mode. <nStyle > Style of the window. All definitions are in file
      WINUSER.CH. Default is WS_CAPTION|WS_SYSMENU|WS_CLIPCHILDREN. If you will use
      controls such as PUSHBUTTON, you MUST include WS_CLIPCHILDREN. <nParentWin> Is
      the mother of the new window. Default is current window ( in Standard mode )
      and the last window ( in MainCoord mode ). If you want the new window to not
      have parent, pass -1 as argument. <nExStyle> Extended style to window ( for
      example : WS_EX_TOOLTIPWINDOW ). Default is NIL. Note : this parameter does
      not exist in original GTWVW to be opened. This
   $DESCRIPTION$
      Opens a window in specified coordinates. Depending of parameter in function
      WVW_NoStartUpSubWindow() the window will be displayed or remains invisible (
      until we call function WVW_ShowWindow() ).
   $RETURNS$
      Number of window, if successful, zero if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_NoStartupSubWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_NoStartupSubWindow( lOn )
   $ARGUMENTS$
      <lOn> .T. when open window, will be displayed ( default ). .F. when open
      window, remains invisible.
   $DESCRIPTION$
      Informs to the system that the window, when created, will be displayed or
      remains invisible until we call funtion WVW_ShowWindow().
   $RETURNS$
      Returns new configuration ( if argument <lOn> is passed ) or actual
      configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_nRowOfs()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_nRowOfs( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Returns row offset of window <nWinNum> ( 0==MAIN ), relative to Main Window.
   $RETURNS$
      Number of offset rows.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_nSetCurWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_nSetCurWindow( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Assigns <nWinNum> as the new current window. Makes sense only if in
      StandardMode.
   $RETURNS$
      Returns old current window.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_NumBMCache()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_NumBMCache()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Reads number of user-bitmap cache.
   $RETURNS$
      Returns current number of user-bitmap cache.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PasteFromClipboard()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PasteFromClipboard()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Paste text from Clipboard.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PBCreate()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PBCreate( nWinNum ,; nTop ,; nLeft ,; nBottom ,; nRight ,; cText ,;
      cImage/nImage ,; bBlock ,; aOffset ,; nStretchBitmap,; lMap3DColors )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to create the button. <cText> Text of the button. Default
      is "". <cImage/nImage> If specified as numeric, identify ID from Resource in a
      .RC file. If specified as string, must have a full path to an image file.
      <bBlock> Code block to be executed whenever a BN_CLICK event occurred (press
      and release the button). Always pass as a parameter : <nWinNum> and ID of
      button. <aOffset> Array of four row/column. elements with top/left,
      bottom/right coordinates to align button with
   $DESCRIPTION$
      Creates a pushbutton in current window.
   $RETURNS$
      Returns the handle of the new pushbutton, if successful ( or zero if failed ).
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PBDestroy()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PBDestroy( nWinNum, nPBId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPBId> ID of the
      pushbutton.
   $DESCRIPTION$
      Deletes a pushbutton of current window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PBEnable()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PBEnable( nWinNum, nPBId, lToggle )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPBId> ID of the
      pushbutton. <lToggle> .T. Enable pushbutton ( default ). .F. Disable
      pushbutton.
   $DESCRIPTION$
      Enable/disable the pushbutton in current window.
   $RETURNS$
      Returns prior status of pushbutton, if <lToggle> is passed. Otherwise, returns
      actual status of pushbutton ( .T. is enabled, .F. disabled ).
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PBSetCodeBlock()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PBSetCodeBlock( nWinNum, nPBId, bBlock )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPBId> ID of the
      pushbutton. <bBlock> Code block.
   $DESCRIPTION$
      Assign a new code block to a pushbutton in current window.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PBSetFocus()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PBSetFocus( nWinNum, nPBId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPBId> ID of the
      pushbutton.
   $DESCRIPTION$
      Set focus to pushbutton to current window.
   $RETURNS$
      .T. if successful, .F. if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PBSetFont()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PBSetFont( nWinNum ,; cFontFace ,; nHeight ,; nWidth ,; nWeight ,;
      nQuality ,; lItalic ,; lUnderline,; lStrikeout )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <cFontName> Name of the
      font. <nHeight> Height of the font's character. <nWidth> Specifies average
      width of character in the font. <nWeight> Specifies the weight of the font in
      the range 0 through 1000 ( see About Fonts section ). <nQuality> Specifies the
      output quality. <lItalic> Specifies an italic font if set to TRUE.
      <lUnderline> Specifies an underlined font if set to TRUE. <lStrikeout>
      Specifies a strikeout font if set to TRUE.
   $DESCRIPTION$
      This funtction will initialize font for ALL pushbuttons in window <nWinNum>,
      including ones created later on.
   $RETURNS$
      .T. if successful, .F. if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PBSetStyle()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PBSetStyle( nWinNum, nPBId, nStyle )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPBId> ID of pushbutton.
      <nStyle> Define style of pushbutton. You can see all possibilities
      BS_PUSHBUTTON, BS_DEFPUSHBUTTON, etc. ). Typical usage : BS_DEFPUSHBUTTON
      BS_PUSHBUTTON in file WINUSER.CH (
   $DESCRIPTION$
      Assign new style to button in current window.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PGCreate()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PGCreate( nWinNum ,; nTop ,; nLeft ,; nBottom ,; nRight ,; aOffset ,;
      nBackColor,; nBarColor ,; lSmooth ,; lVertical )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to create a progress bar. <aOffset> Array of four elements
      with top/left, bottom/right coordinates to align progress bar with row/column.
      <nBackColor> Background color. <nBarColor> Progress bar color. <lSmooth> .T.
      draw progress bar as a continuum bar .F. draw progress bar with tiny distinct
      rectangles ( default ) <lVertical> .T. draw as vertical progress bar .F. draw
      as horizontal progress bar ( default )
   $DESCRIPTION$
      Create progress bar for current window. Progress bar range is initially set as
      0 to 100, start from 0.
   $RETURNS$
      Progress bar handle, if successful. Zero if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PGDestroy()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PGDestroy( nWinNum, nPGId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPGId> ID of progress
      bar.
   $DESCRIPTION$
      Delete a progress bar for current window
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PGGetPos()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PGGetPos( nWinNum, nPGId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPGId> ID of progress
      bar.
   $DESCRIPTION$
      Get progress bar current position.
   $RETURNS$
      Returns 0 if operation failed, otherwise return progress bar position.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_PGSetPos()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_PGSetPos( nWinNum, nPGId, nPos )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPGId> ID of progress
      bar. <nPos> A number in range of current range.
   $DESCRIPTION$
      Update progress bar position within current range.
   $RETURNS$
      Returns .T. if operation considered successfull, otherwise .F.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_ProcessMessages()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_ProcessMessages( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. NOTE : Despite the
      parameter, the following will actually process messages for all windows
   $DESCRIPTION$
      Process messages for all windows.
   $RETURNS$
      None ( actually, returns number 1, with no use ).
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_Restore()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_Restore( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Restores the window ( <nWinNum> is ignored ). Restoring window from its
      maximized state might need handling in callback function WVW_SIZE(), because
      this function assumes no change in maxrow()/maxcol().
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_RestScreen()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_RestScreen( nWinNum, nTop, nLeft, nBottom, nRight, aScr, lDoNotDestroyBMP )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Screen coordinates to display data saved by function WVW_SaveScreen().
      <aScr> Array with three elements ( height, width and handle of bitmap ).
      <lDoNotDestroyBMP> If .T., after restore screen, delete the bitmap used to
      save screen. If .F., the bitmap will not be erased. ( default )
   $DESCRIPTION$
      Restores screen, saved by function WVW_SaveScreen().
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SaveScreen()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SaveScreen( nWinNum, nTop, nLeft, nBottom, nRight )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Screen coordinates to save screen ( always from current window,
      because argument <nWinNum> is ignored ).
   $DESCRIPTION$
      Save a region of screen, writing in a bitmap file.
   $RETURNS$
      Array of three elements, with height, width and handle of the bitmap.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SBAddPart()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SBAddPart( nWinNum, cMaxText, nWidth, nStyle, lResetParts, cIcon, cTooltip )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <cMaxText> If present, the
      width of status bar will be the width of this text. <nWidth> Width of status
      bar part. Ignored, if <cMaxText> is passed. <nStyle> Style of status bar : 0
      0x100 0x200 Recessed ( default ) No borders Raised
   $DESCRIPTION$
      Adds a new division in a status <cMaxText/nWidth> and <nStyle>. bar, with
      width and style specified in arguments
   $RETURNS$
      Returns number of parts, if successful. Zero if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SBCreate()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SBCreate( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Create status bar for current window, with one part.
   $RETURNS$
      Handle to status bar of current window. Zero if failed, eg. if there is
      already a status bar for this window.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SBDestroy()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SBDestroy( nWinNum )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window.
   $DESCRIPTION$
      Destroy status bar, forcing the window to be draw again.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SBGetParts()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SBGetParts()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Get number of parts in status bar of current window.
   $RETURNS$
      Number of parts in status bar.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SBGetText()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SBGetText( nWinNum, nPart )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPart> Number of part in
      status bar.
   $DESCRIPTION$
      Get text of status bar's part <nPart>.
   $RETURNS$
      Text from <nPart> in status bar.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SBRefresh()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SBRefresh()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Reinitialize statusBar's parts, eg. after window resize.
   $RETURNS$
      Number of parts in status bar, if successful. Zero, otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SBSetText()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SBSetText( nWinNum, nPart, cText )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nPart> Number of part in
      status bar. <cText> Text to be configured.
   $DESCRIPTION$
      Set text of status bar's part <nPart> .
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetAltF4Close()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetAltF4Close( lOn )
   $ARGUMENTS$
      <lOn> .T. if application can be finished using ALT F4 key. .F. if application
      can not be finished usgin ALT F4 key.
   $DESCRIPTION$
      Identify if the application can be finished using ALT F4 key.
   $RETURNS$
      Old configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetAsNormal()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetAsNormal()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Returns window into normal state ( opposing to function WVW_SetOnTop() ).
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetBrush()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetBrush( nStyle, nColor, nHatch )
   $ARGUMENTS$
      <nStyle> Identify pen style. All definitions can be viewed in file WINGDI.CH (
      BS_SOLID, BS_NULL, etc. ). <nColor> Index color to pen draw. <nHatch> Define
      the filling pattern of pen. All definitions can be viewed in file WINGDI.CH (
      HS_VERTICAL, HS_HORIZONTAL, etc. ).
   $DESCRIPTION$
      Define style, color and pattern of pen filling.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetClipboard()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetClipboard( cText )
   $ARGUMENTS$
      <cText> Text to be inserted in the clipboard.
   $DESCRIPTION$
      Sets text to the clipboard.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetCodePage()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetCodePage( nWinNum, nCodePage )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCodePage> Sets the code
      page.
   $DESCRIPTION$
      Define code page for current window.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetDefCentreWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetDefCentreWindow( lCentre )
   $ARGUMENTS$
      <lCentre> If .T., config all newly opened windows, to be centralized
      horizontally and vertically.
   $DESCRIPTION$
      Read or set the parameter for centralization of windows.
   $RETURNS$
      If <lCentre> is configuration. passed, returns old configuration value,
      otherwise returns actual
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetDefHCentreWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetDefHCentreWindow( lCentre )
   $ARGUMENTS$
      <lCentre> If .T., config all newly opened windows, to be centralized
      horizontally.
   $DESCRIPTION$
      Read or set the parameter for centralization of windows.
   $RETURNS$
      If <lCentre> is configuration. passed, returns old configuration value,
      otherwise returns actual
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetDefLineSpacing()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetDefLineSpacing( nLineSpacing )
   $ARGUMENTS$
      <nLineSpacing> Number of line spacing. Must be even, positive number <= 40,
      otherwise it will be ignored.
   $DESCRIPTION$
      Sets line spacing for all windows.
   $RETURNS$
      Old configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetDefLSpaceColor()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetDefLSpaceColor( nColorIndex )
   $ARGUMENTS$
      <nColorIndex> Index color to line spacing. Must be between 0 and 15, or ­1
      meaning line spacing has no color.
   $DESCRIPTION$
      Change color to line spacing.
   $RETURNS$
      Prior configuration, if <nColorIndex> is passed, otherwise actual
      configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetDefVCentreWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetDefVCentreWindow( lCentre )
   $ARGUMENTS$
      <lCentre> If .T., config all newly opened windows, to be centralized
      vertically.
   $DESCRIPTION$
      Read or set the parameter for centralization of windows.
   $RETURNS$
      If <lCentre> is configuration. passed, returns old configuration value,
      otherwise returns actual
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetFont()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetFont( cFontFace, nFontHeight, nFontWidth, nFontWeight, nFontQuality )
   $ARGUMENTS$
      <cFontName> Name of the font. ( e.g., MS Sans Serif ). <nFontHeight> Height of
      the font's character. <nFontWidth> Specifies average width of character in the
      font. <nFontWeight> Specifies the weight of the font in the range 0 through
      1000 ( see About Fonts section ). <nFontQuality> Specifies the output quality.
      All arguments are optional. This function uses the values assigned in windows
      creation.
   $DESCRIPTION$
      Modify the font or the arguments related to the font ( height, width, quality,
      etc. ).
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetIcon()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetIcon( nWinNum, nIcon, cIcon )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nIcon> Identify an icon
      in a resource file. <cIcon> Icon's file name.
   $DESCRIPTION$
      Set the icon for current window ( argument <nWinNum> is ignored ).
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetLastMenuEvent()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetLastMenuEvent( nWinNum, nMenuEvent )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nMenuEvent> Menu's item.
   $DESCRIPTION$
      Set the last selected item of the menu ( returned from WVW_GetLastMenuEvent()
      ).
   $RETURNS$
      Last valid configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetLineSpacing()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetLineSpacing( nWinNum, nLineSpacing )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nLineSpacing> If passed,
      change line spacing in current window, otherwise read actual configuration.
   $DESCRIPTION$
      Read/set line spacing for current window. If window size will become too high,
      line spacing is restored. To change default line spacing for next window open,
      use WVW_SetDefLineSpacing().
   $RETURNS$
      Returns old configuration, if <nLineSpacing> is passed, or actual
      configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetLSpaceColor()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetLSpaceColor( nWinNum, nColorIndex )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nColorIndex> Color index
      to line spacing. Must be between 0 and 15, or ­1, meaning has no color.
   $DESCRIPTION$
      Change color to line spacing for current window. To change default line space
      color for next window open, use WVW_SetDefLineSpacing().
   $RETURNS$
      Returns old configuration, if <nColorIndex> is passed, otherwise actual
      configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetMainCoord()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetMainCoord( lMainCoord )
   $ARGUMENTS$
      <lMainCoord> If passed, change the display mode of windows. Otherwise, read
      actual configuration.
   $DESCRIPTION$
      Change the MainCoord). way of windows are displayed or read actual
      configuration (Standard or
   $RETURNS$
      Actual configuration mode or old configuration, if <lMainCoord> is passed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetMaxBMCache()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetMaxBMCache( nMaxCache )
   $ARGUMENTS$
      <nMaxCache> Limit of cache bitmaps. Default is 20, minimum is 1.
   $DESCRIPTION$
      To minimize bitmap loading operation, wvw_drawimage caches bitmap once it
      reads from disk. Ie., subsequent wvw_drawimage will use the bitmap from the
      memory. When the maximum number of cache is used, the least recently opened
      bitmap will be discarded from the cache. There is no way to discard a specific
      bitmap from the cache. If you want to control bitmap caching manually, use
      wvw_loadpicture() instead.
   $RETURNS$
      Returns old setting of maximum user-bitmap cache.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetMenu()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetMenu( nWinWin, hMenu )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <hMenu> Contains menu
      information.
   $DESCRIPTION$
      Adds a menu, pointed by <hMenu>, in current window. ( argument <nWinNum> is
      ignored ).
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetMenuKeyEvent()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetMenuKeyEvent( nWinNum, nKeyEvent )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nKeyEvent> Number of
      event defined by the user to command menu of the window.
   $DESCRIPTION$
      Defines a numeric event from menu, in current window.
   $RETURNS$
      Last valid configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetMouseMove()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetMouseMove( nWinNum, lMouseMove )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <lMouseMove> .T. recognize
      mouse in application .F. do not recognize mouse in application If not passed,
      returns actual configuration.
   $DESCRIPTION$
      Enable/disable mouse recognition by the application.
   $RETURNS$
      If passed <lMouseMove>, returns .T. to successful operation or .F. otherwise.
      If omitted, returns last valid configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetMousePos()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetMousePos( nWinNum, nRow, nCol )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nRow, nCol> Row/Column to
      position mouse cursor.
   $DESCRIPTION$
      Position mouse cursor.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetOnTop()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetOnTop()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      The window will be always visible, even if the focus is in another window.
      This function change properties of the window, thus it will be on top of any
      other opened window.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetPaintRefresh()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetPaintRefresh( nPaintRefresh )
   $ARGUMENTS$
      <nPaintRefresh> Interval in milliseconds to call WVW_PAINT(). Must be >= 50,
      or == 0, causing repaint to execute immediately.
   $DESCRIPTION$
      Determine interval to calling WVW_PAINT() function, responsible to repaint
      screen.
   $RETURNS$
      Old setting value.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetPalette()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetPalette( aRGBValues )
   $ARGUMENTS$
      <aRGBValues> Array of 16 elements with RGB values.
   $DESCRIPTION$
      Config color palette.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetPen()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetPen( nPenStyle, nWidth, nColor )
   $ARGUMENTS$
      <nPenStyle> Defines pen style. All definition are in file WINGDI.CH (
      PS_SOLID, PS_DOT, etc. ). <nWidth> Specifies width of the pen. <nColor> Index
      color of pen.
   $DESCRIPTION$
      Define style, width and color of pen.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetPointer()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetPointer( nWinNum, nIcon )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nIcon> Model of icon to
      be read. May be a string which identify a resource in a RC file or may be a
      predefined window model ( default is IDC_ARROW ). All definition are in
      WINUSER.CH file.
   $DESCRIPTION$
      Change mouse cursor.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetPopUpMenu()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetPopUpMenu( nWinNum, hPopUp )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <hPopUp> Include all
      information of a popup menu.
   $DESCRIPTION$
      Config the popup menu for current window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTimer()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTimer( nWinNum, nInterval )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nInterval> Interval, in
      milliseconds.
   $DESCRIPTION$
      Set timer event for every <nInterval> milliseconds (it can be usefull to
      update clock on status bar ). Effective only if WVW_TIMER() function exists
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTitle()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTitle( nWinNum, cTitle )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <cTitle> Title of window.
   $DESCRIPTION$
      Define title of current window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTooltip()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTooltip( nWinNum, nTop, nLeft, nBottom, nRight, cToolText )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to show tooltip. <cToolText> Tooltip text.
   $DESCRIPTION$
      Defines a tooltip.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTooltipActive()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTooltipActive( nWinNum, lToggle )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <lToggle> .T. enable
      tooltip. .F. disable tooltip. If not passed, returns actual configuration.
   $DESCRIPTION$
      Enable/disable tooltip.
   $RETURNS$
      Old configuration ( if passed <lToggle> ) or actual configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTooltipBkColor()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTooltipBkColor( nWinNum, nColor )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nColor> Color index of
      tooltip.
   $DESCRIPTION$
      Get/set a background color of tooltip.
   $RETURNS$
      If not passed <nColor>, returns actual background color of tooltip, otherwise,
      sets the new color.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTooltipMargin()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTooltipMargin( nWinNum, nTop, nLeft, nBottom, nRight )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nTop, nLeft, nBottom,
      nRight> Coordinates to draw tooltip.
   $DESCRIPTION$
      Define the borders of tooltip. The border is the distance ( in pixels )
      between window's border and text inside toolip.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTooltipText()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTooltipText( nWinNum, cText )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <cText> Text of tooltip.
   $DESCRIPTION$
      Define text to tooltip.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTooltipTextColor()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTooltipTextColor( nWinNum, nColor )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nColor> Color index to
      text in tooltip.
   $DESCRIPTION$
      Define or get the color of text in tooltip.
   $RETURNS$
      If not passed <nColor>, returns actual color of text, othewise, sets the new
      color.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTooltipTitle()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTooltipTitle( nWinNum, nIcon, cTitle )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nIcon> Identify if it
      will be displayed an icon with text in tooltip. Is allowed one of the
      following values : 0 1 2 3 no icon ( default ) information warning Error
   $DESCRIPTION$
      None.
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetTooltipWidth()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetTooltipWidth( nWinNum, nWidth )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nWidth> Width of tooltip
      area.
   $DESCRIPTION$
      Change or get the width of tooltip area.
   $RETURNS$
      If not passed <nWidth>, returns actual width of tooltip area, otherwise, sets
      the new width of tooltip area.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetVertCaret()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetVertCaret( lOn )
   $ARGUMENTS$
      <lOn> .T. turn caret into vertical caret .F. turn caret into horizontal caret
   $DESCRIPTION$
      Change caret of text.
   $RETURNS$
      If passed <lOn>, returns old configuration. If not passed, returns actual
      configuration.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetWindowCentre()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetWindowCentre( nWinNum, lCentre, lPaintIt )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <lCentre> .T. centralize
      window .F. not centralize window <lPaintIt> .T. Repaint all windows immediate.
      .F. Just update configuration.
   $DESCRIPTION$
      Update parameter to centralization of all opened windows ( and newly opened ).
      If passed <lPaintIt> and <lCentre>, all windows are repainted and cetralized.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetWindowPos()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetWindowPos( nWinNum, nXPosition, nYPosition )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nXPosition> Horizontal
      position in pixels. <nYPosition> Vertical posititon in pixels.
   $DESCRIPTION$
      Change position of current window, based in <nXPosition> and <nYPosition>
      coordinates.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_SetWinStyle()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_SetWinStyle( nWinNum, nStyle )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nStyle> New windows
      style. If the windows has any control ( PUSHBUTTON, SCROLLBAR, etc. ), must be
      added WS_CLIPCHILDREN style.
   $DESCRIPTION$
      Read or set style for window <nWinNum>. If windows is minimized or hidden, and
      if passed <nStyle>, the window will be showed.
   $RETURNS$
      Returns old style of the window.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_ShowWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_ShowWindow( nWinNum, nMode )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nMode> Points out how
      window will be showed. Default is SW_SHOWNORMAL ( another definitions in file
      WINUSER.CH ).
   $DESCRIPTION$
      Set the mode of showing window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_TBAddButton()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_TBAddButton( nWinNum, nCommand, xBitmap, cLabel, nBitmapType, lMap3DColors )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCommand> ID of action to
      be executed when user press button. <xBitmap> ID of bitmap resource in .RC
      file ( in this case, the image can not have more than 256 colors ) or full
      path to a file name. <cLabel> Text of button. If passed <lDisplayText> ( in
      function WVW_TBCreate() ) to .T., the text will be showed below image,
      otherwise will be used as a tooltip. <nBitmapType> Bitmap type. Can be : 0 1 2
      3 Custom Standard windows bitmaps ( COPY, PAST, FIND, OPEN, etc. ) System view
      bitmaps System history bitmaps
   $DESCRIPTION$
      Adds one button on the right of existing buttons, in a toolbar.
   $RETURNS$
      Always .T.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_TBButtonCount()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_TBButtonCount()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Count the number of buttons in a toolbar.
   $RETURNS$
      Number of buttons.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_TBCMD2Index()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_TBCMD2Index( nWinNum, nCmd )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nCmd> ID of command to
      search ( zero based ).
   $DESCRIPTION$
      Read the number of button whose command ID is <nCmd>.
   $RETURNS$
      Number of button or ­1, if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_TBCreate()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_TBCreate( nWinNum, lDisplayText, nStyle, nSystemBitmap, nImageWidth,
      nImageHeight )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <lDIsplayText> .T. Text of
      button will be showed with the image .F. Text will be showed as a tooltip (
      default ) <nStyle> Style of toolbar. Default is TBSTYLE_FLAT |
      TBSTYLE_TOOLTIPS ( another definitions are in file COMMCTRL.H ).
      <nSystemBitmap> Points out if will be used Windows system bitmaps. Can be : 0
      1 2 Do not use Windows system bitmaps Use Windows system bitmaps ( small ) Use
      Windows system bitmaps ( large )
   $DESCRIPTION$
      Creates a toolbar on top of current window ( with no button ).
   $RETURNS$
      Handle of toolbar, if successful. Zero if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_TBDelButton()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_TBDelButton( nWinNum, nButton )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nButton> Number of button
      do delete. The separator button count as a button, and can be deleted. This
      list is zero based.
   $DESCRIPTION$
      Delete a button in a toolbar.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_TBDestroy()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_TBDestroy()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Delete a toolbar from current window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_TBEnableButton()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_TBEnableButton( nWinNum. nButton, lToggle )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nButton> Number of button
      in a toolbar ( zero based list ). <lToggle> .T. Enable the button .F. Disable
      the button
   $DESCRIPTION$
      Enable/disable a button in a toolbar.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_TBIndex2CMD()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_TBIndex2CMD( nWinNum, nButton )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nButton> Number of button
      in a toolbar ( zero based list ).
   $DESCRIPTION$
      Returns the ID assigned to the button.
   $RETURNS$
      Number of command ID, if successful, -1 if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_TrackPopupMenu()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_TrackPopupMenu( nWinNum, nHandle )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nHandle> Popup menu
      handle.
   $DESCRIPTION$
      Shows a menu in the cursor position.
   $RETURNS$
      ID of selected option or zero if user cancels or an error occurs.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_UnreachedBr()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_UnreachedBr( nWinNum, nBottomPixels, nRightPixels )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nBottomPixels> Passed by
      reference, to keep the number of lines ( in pixels ). <nRightPixels> Passed by
      reference, to keep the number of columns ( in pixels ).
   $DESCRIPTION$
      Read the number of pixels out of reach to lines and columns when window
      <nWinNum> is maximized.
   $RETURNS$
      Number of rows/columns in pixels.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_UpdateWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_UpdateWindow()
   $ARGUMENTS$
      None.
   $DESCRIPTION$
      Update the window, repaint it.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_XBCreate()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_XBCreate( nWinNum, nStyle, nTop, nLeft, nLength, bBlock, aOffset )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nStyle> 0 Horizontal 1
      Vertical <nTop, nLeft> Intital row/column of scrollbar ( in characters ).
      <nLength> Length of scrollbar ( in characters ). <bBlock> Code block to
      execute on every VM_VSCROLL/VM_HSCROLL. This code block will be evaluated with
      these parameters: nWinNum nXBid nXBmsg window number scrollbar ID scrollbar
      message. Can be divided in two categories :
   $DESCRIPTION$
      Creates a scollbar in current window.
   $RETURNS$
      Scrollbar handle, if successful. Zero if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_XBDestroy()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_XBDestroy( nWinNum, nXBId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nXBId> ID of scrollbar.
   $DESCRIPTION$
      Delete the scrollbar in current window.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_XBEnable()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_XBEnable( nWinNum, nXBId, nFlags )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nXBId> ID of scrollbar.
      <nFlags> The following values are allowed : 0 1 2 3 enable both arrows disable
      left/up arrow disable right/down arrow disable both arrow
   $DESCRIPTION$
      Enable/disable scrollbar in current window.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_XBInfo()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_XBInfo( nWinNum, nXBId )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nXBId> ID of scrollbar.
   $DESCRIPTION$
      Get information about scrollbar.
   $RETURNS$
      Array with five elements ( if successful ) : nMin nMax nPageSize nPos
      nTrackPos Minimum positions to scrolling Maximum positions to scrolling Page
      size Position of scrolling button Exact position of the scrolling button, when
      the user beginning a drag-and-drop operation.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_XBShow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_XBShow( nWinNum, nXBId, lShow )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nXBId> ID of scrollbar.
      <lShow> .T. show scrollbar ( default ) .F. hide scrollbar
   $DESCRIPTION$
      Show/hide scrollbar in current window.
   $RETURNS$
      .T. if successful, .F. otherwise.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_XBUpdate()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_XBUpdate( nWinNum, nXBId, nPos, nPageSize, nMin, nMax )
   $ARGUMENTS$
      <nWinNum> Window number. Default is current window. <nXBId> ID of scrollbar.
      <nPos> Specifies the position of scrolling button. <nPageSize> Page size. This
      value is used by scrollbar to determine the proporcional size to page jump.
      <nMin> Minimum value to scrolling. <nMax> Maximum value to scrolling.
   $DESCRIPTION$
      Update and redisplay a scollbar data. The parameters <nPos>, <nPageSize>,
      <nMin> and <nMax> are optional, however, both <nMin> and <nMax> must be
      supplied, or not at all.
   $RETURNS$
      Returns current position of scroll thumb, if successful. ­1 if failed.
   $PLATFORMS$
      Windows
   $END$
 */

/* $DOC$
   $TEMPLATE$
      Function
   $NAME$
      WVW_xReposWindow()
   $CATEGORY$
      API
   $SUBCATEGORY$
      GTWVW
   $SYNTAX$
      WVW_xReposWindow( lAnchored )
   $ARGUMENTS$
      <lAnchored> If .T., all subwindows are positioned according to their
      respective coordinate If .F., all subwindows are positioned according to
      whatever their "CenterWindow" setting
   $DESCRIPTION$
      Reposition all windows to their initial position.
   $RETURNS$
      None.
   $PLATFORMS$
      Windows
   $END$
 */
